{"version":3,"sources":["ToDoLists.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDoLists","props","_jsx","_Fragment","children","_jsxs","className","onClick","onSelect","id","text","App","_useState","useState","_useState2","_slicedToArray","inputList","setInputList","_useState3","_useState4","Items","setItems","useEffect","storedItems","localStorage","getItem","JSON","parse","setItem","stringify","deleteItems","oldItems","filter","arrElem","index","window","location","type","placeholder","value","onChange","event","target","concat","_toConsumableArray","map","itemval","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"oMAmBeA,EAjBG,SAACC,GAEf,OACIC,cAAAC,WAAA,CAAAC,SACIC,eAAA,OAAKC,UAAU,aAAYF,SAAA,CAC3BF,cAAA,KAAGI,UAAU,cACT,cAAY,OACZC,QAAS,WACLN,EAAMO,SAASP,EAAMQ,GACzB,IAEJP,cAAA,MAAAE,SAAKH,EAAMS,WAIvB,EC+DeC,EA7EH,WACV,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAA0BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGtBG,qBAAU,WACR,IAAMC,EAAcC,aAAaC,QAAQ,aACrCF,GACFF,EAASK,KAAKC,MAAMJ,GAExB,GAAG,IAGHD,qBAAU,WACRE,aAAaI,QAAQ,YAAaF,KAAKG,UAAUT,GACnD,GAAG,CAACA,IAEJ,IAWMU,EAAc,SAACrB,GACnBY,GAAS,SAACU,GACR,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC/B,OAAOA,IAAUzB,CACnB,GACF,GACF,EAEA,OACEP,cAAAC,WAAA,CAAAC,SACEF,cAAA,OAAKI,UAAU,WAAUF,SACvBC,eAAA,OAAKC,UAAU,aAAYF,SAAA,CACzBF,cAAA,SACAA,cAAA,MACEI,UAAU,SACVC,QAAS,kBACN4B,OAAOC,SACN,2CAA2C,EAC9ChC,SACF,cAGDF,cAAA,SACAA,cAAA,SACEmC,KAAK,OACLC,YAAY,cACZC,MAAOvB,EACPwB,SAtCQ,SAACC,GACjBxB,EAAawB,EAAMC,OAAOH,MAC5B,IAsCQrC,cAAA,UAAQK,QApCI,WAClBc,GAAS,SAACU,GACR,MAAM,GAANY,OAAAC,YAAWb,GAAQ,CAAEf,GACvB,IACAC,EAAa,GACf,EA+BqCb,SAAC,QAE9BF,cAAA,MAAAE,SACGgB,EAAMyB,KAAI,SAACC,EAASZ,GACnB,OACEhC,cAACF,EAAS,CAERS,GAAIyB,EACJxB,KAAMoC,EACNtC,SAAUsB,GAHLI,EAMX,YAMZ,EClEea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACPxD,cAACyD,IAAMC,WAAU,CAAAxD,SACfF,cAACS,EAAG,MAENkD,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.13de20e6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ToDoLists = (props) =>{\n    \n    return (\n        <>\n            <div className=\"todo_Style\">\n            <i className=\"fa fa-times\" \n                aria-hidden=\"true\" \n                onClick={()=>{\n                    props.onSelect(props.id);\n                }}\n            />\n            <li>{props.text}</li>\n            </div>\n        </>\n    );\n};\n\nexport default ToDoLists;","import React, { useState, useEffect } from \"react\";\nimport ToDoLists from \"./ToDoLists\";\n\nconst App = () => {\n  const [inputList, setInputList] = useState(\"\");\n  const [Items, setItems] = useState([]);\n\n  // Load items from local storage when the component mounts\n  useEffect(() => {\n    const storedItems = localStorage.getItem(\"todoItems\");\n    if (storedItems) {\n      setItems(JSON.parse(storedItems));\n    }\n  }, []);\n\n  // Update local storage when Items state changes\n  useEffect(() => {\n    localStorage.setItem(\"todoItems\", JSON.stringify(Items));\n  }, [Items]);\n\n  const itemEvent = (event) => {\n    setInputList(event.target.value);\n  };\n\n  const listOfItems = () => {\n    setItems((oldItems) => {\n      return [...oldItems, inputList];\n    });\n    setInputList(\"\");\n  };\n\n  const deleteItems = (id) => {\n    setItems((oldItems) => {\n      return oldItems.filter((arrElem, index) => {\n        return index !== id;\n      });\n    });\n  };\n\n  return (\n    <>\n      <div className=\"main_div\">\n        <div className=\"center_div\">\n          <br />\n          <h1\n            className=\"Cursor\"\n            onClick={() =>\n              (window.location =\n                \"https://github.com/debojyoti369/todo-list\")\n            }\n          >\n            ToDo List\n          </h1>\n          <br />\n          <input\n            type=\"text\"\n            placeholder=\"Add an Item\"\n            value={inputList}\n            onChange={itemEvent}\n          />\n          <button onClick={listOfItems}> + </button>\n\n          <ol>\n            {Items.map((itemval, index) => {\n              return (\n                <ToDoLists\n                  key={index}\n                  id={index}\n                  text={itemval}\n                  onSelect={deleteItems}\n                />\n              );\n            })}\n          </ol>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}